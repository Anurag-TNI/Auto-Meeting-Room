{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red77\green80\blue85;\red246\green247\blue249;\red46\green49\blue51;
\red20\green67\blue174;\red186\green6\blue115;\red162\green0\blue16;\red18\green115\blue126;\red24\green25\blue27;
\red21\green98\blue39;}
{\*\expandedcolortbl;;\cssrgb\c37255\c38824\c40784;\cssrgb\c97255\c97647\c98039;\cssrgb\c23529\c25098\c26275;
\cssrgb\c9412\c35294\c73725;\cssrgb\c78824\c15294\c52549;\cssrgb\c70196\c7843\c7059;\cssrgb\c3529\c52157\c56863;\cssrgb\c12549\c12941\c14118;
\cssrgb\c7451\c45098\c20000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 // ====================================================================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // CONFIGURATION VARIABLES (CHANGE THESE)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // ====================================================================\cf4 \cb1 \strokec4 \
\
\cf2 \cb3 \strokec2 // The ID of the spreadsheet containing your meeting room list.\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 SHEET_ID\cf4 \strokec4  = \cf7 \strokec7 '1H5qSAiGGGs5UQ2fxpWFlR4VCHnbvrwX5FZMOM-U9DWk'\cf4 \strokec4 ; \cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // The name of the sheet containing your room list (e.g., 'Sheet1').\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 SHEET_NAME\cf4 \strokec4  = \cf7 \strokec7 'Sheet1'\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // How many days into the future should the script look for meetings to book?\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 const\cf4 \strokec4  \cf6 \strokec6 DAYS_TO_LOOK_AHEAD\cf4 \strokec4  = \cf8 \strokec8 2\cf4 \strokec4 ;\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 // ====================================================================\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // MAIN FUNCTION (DO NOT EDIT BELOW THIS LINE)\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 // ====================================================================\cf4 \cb1 \strokec4 \
\
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 bookMeetingRooms\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cb1 \
\cb3   \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 'Starting the room booking process.'\cf4 \strokec4 );\cb1 \
\
\cb3   \cf2 \strokec2 // 1. Get the list of meeting rooms from the spreadsheet.\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 meetingRooms\cf4 \strokec4  = \cf9 \strokec9 getMeetingRoomsFromSheet\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 meetingRooms\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4  === \cf8 \strokec8 0\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 'No meeting rooms found in the spreadsheet. Please check the sheet name and data.'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3   \}\cb1 \
\cb3   \cb1 \
\cb3   \cf2 \strokec2 // Create a Set of all meeting room emails for fast lookup.\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 roomEmails\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Set\cf4 \strokec4 (\cf9 \strokec9 meetingRooms\cf4 \strokec4 .\cf9 \strokec9 map\cf4 \strokec4 (\cf9 \strokec9 room\cf4 \strokec4  => \cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 email\cf4 \strokec4 ));\cb1 \
\
\cb3   \cf2 \strokec2 // 2. Get the calendar events for the specified timeframe.\cf4 \cb1 \strokec4 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 myCalendar\cf4 \strokec4  = \cf6 \strokec6 CalendarApp\cf4 \strokec4 .\cf9 \strokec9 getDefaultCalendar\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 startTime\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ();\cb1 \
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 endTime\cf4 \strokec4  = \cf5 \strokec5 new\cf4 \strokec4  \cf6 \strokec6 Date\cf4 \strokec4 ();\cb1 \
\cb3   \cf9 \strokec9 endTime\cf4 \strokec4 .\cf9 \strokec9 setDate\cf4 \strokec4 (\cf9 \strokec9 startTime\cf4 \strokec4 .\cf9 \strokec9 getDate\cf4 \strokec4 () + \cf6 \strokec6 DAYS_TO_LOOK_AHEAD\cf4 \strokec4 );\cb1 \
\
\cb3   \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 events\cf4 \strokec4  = \cf9 \strokec9 myCalendar\cf4 \strokec4 .\cf9 \strokec9 getEvents\cf4 \strokec4 (\cf9 \strokec9 startTime\cf4 \strokec4 , \cf9 \strokec9 endTime\cf4 \strokec4 );\cb1 \
\cb3   \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `Found \cf4 \strokec4 $\{\cf9 \strokec9 events\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 \}\cf7 \strokec7  events to check.`\cf4 \strokec4 );\cb1 \
\
\cb3   \cf2 \strokec2 // 3. Process each event.\cf4 \cb1 \strokec4 \
\cb3   \cf9 \strokec9 events\cf4 \strokec4 .\cf9 \strokec9 forEach\cf4 \strokec4 (\cf9 \strokec9 event\cf4 \strokec4  => \{\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Check if you are the owner or if your attendance is accepted.\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 isOwnedByMe\cf4 \strokec4 () && \cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getMyStatus\cf4 \strokec4 () !== \cf6 \strokec6 CalendarApp\cf4 \strokec4 .\cf6 \strokec6 GuestStatus\cf4 \strokec4 .\cf6 \strokec6 YES\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `Skipping "\cf4 \strokec4 $\{\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getTitle\cf4 \strokec4 ()\}\cf7 \strokec7 " as your attendance is not "Accepted" and you are not the owner.`\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4 ; \cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 attendees\cf4 \strokec4  = \cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getGuestList\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 guestCount\cf4 \strokec4  = \cf9 \strokec9 attendees\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ;\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // NEW: Check if a meeting room is already booked and has accepted the invite.\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 hasBookedRoom\cf4 \strokec4  = \cf9 \strokec9 attendees\cf4 \strokec4 .\cf9 \strokec9 some\cf4 \strokec4 (\cf9 \strokec9 guest\cf4 \strokec4  => \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 email\cf4 \strokec4  = \cf9 \strokec9 guest\cf4 \strokec4 .\cf9 \strokec9 getEmail\cf4 \strokec4 ();\cb1 \
\cb3       \cf2 \strokec2 // Check if the guest's email is in our list of meeting room emails.\cf4 \cb1 \strokec4 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 roomEmails\cf4 \strokec4 .\cf9 \strokec9 has\cf4 \strokec4 (\cf9 \strokec9 email\cf4 \strokec4 )) \{\cb1 \
\cb3         \cf2 \strokec2 // If it is, now check if the meeting room has accepted.\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 guest\cf4 \strokec4 .\cf9 \strokec9 getGuestStatus\cf4 \strokec4 () === \cf6 \strokec6 CalendarApp\cf4 \strokec4 .\cf6 \strokec6 GuestStatus\cf4 \strokec4 .\cf6 \strokec6 YES\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `Found an existing, accepted room (\cf4 \strokec4 $\{\cf9 \strokec9 email\cf4 \strokec4 \}\cf7 \strokec7 ) for "\cf4 \strokec4 $\{\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getTitle\cf4 \strokec4 ()\}\cf7 \strokec7 ".`\cf4 \strokec4 );\cb1 \
\cb3           \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 true\cf4 \strokec4 ; \cf2 \strokec2 // Match found, so stop and return true.\cf4 \cb1 \strokec4 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3     \});\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 hasBookedRoom\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `Skipping "\cf4 \strokec4 $\{\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getTitle\cf4 \strokec4 ()\}\cf7 \strokec7 " because a meeting room is already booked.`\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4 ;\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `Checking event: "\cf4 \strokec4 $\{\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getTitle\cf4 \strokec4 ()\}\cf7 \strokec7 " with \cf4 \strokec4 $\{\cf9 \strokec9 guestCount\cf4 \strokec4 \}\cf7 \strokec7  invitees.`\cf4 \strokec4 );\cb1 \
\cb3     \cb1 \
\cb3     \cf2 \strokec2 // Find a suitable and available room.\cf4 \cb1 \strokec4 \
\cb3     \cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 roomBooked\cf4 \strokec4  = \cf5 \strokec5 false\cf4 \strokec4 ;\cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 room\cf4 \strokec4  \cf5 \strokec5 of\cf4 \strokec4  \cf9 \strokec9 meetingRooms\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 guestCount\cf4 \strokec4  <= \cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 capacity\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf2 \strokec2 // Room capacity is sufficient. Now check if it's available.\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 roomCalendar\cf4 \strokec4  = \cf6 \strokec6 CalendarApp\cf4 \strokec4 .\cf9 \strokec9 getCalendarById\cf4 \strokec4 (\cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 email\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 roomCalendar\cf4 \strokec4 ) \{\cb1 \
\cb3             \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `-> ERROR: Could not find calendar for room "\cf4 \strokec4 $\{\cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 name\cf4 \strokec4 \}\cf7 \strokec7 " (\cf4 \strokec4 $\{\cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 email\cf4 \strokec4 \}\cf7 \strokec7 ). Check the email ID and sharing permissions. Skipping this room.`\cf4 \strokec4 );\cb1 \
\cb3             \cf5 \strokec5 continue\cf4 \strokec4 ;\cb1 \
\cb3         \}\cb1 \
\
\cb3         \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 conflicts\cf4 \strokec4  = \cf9 \strokec9 roomCalendar\cf4 \strokec4 .\cf9 \strokec9 getEvents\cf4 \strokec4 (\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getStartTime\cf4 \strokec4 (), \cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getEndTime\cf4 \strokec4 ());\cb1 \
\cb3         \cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 conflicts\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4  === \cf8 \strokec8 0\cf4 \strokec4 ) \{\cb1 \
\cb3           \cf2 \strokec2 // Room is available. Book it!\cf4 \cb1 \strokec4 \
\cb3           \cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 addGuest\cf4 \strokec4 (\cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 email\cf4 \strokec4 );\cb1 \
\cb3           \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `-> BOOKED: "\cf4 \strokec4 $\{\cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 name\cf4 \strokec4 \}\cf7 \strokec7 " for "\cf4 \strokec4 $\{\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getTitle\cf4 \strokec4 ()\}\cf7 \strokec7 ".`\cf4 \strokec4 );\cb1 \
\cb3           \cf9 \strokec9 roomBooked\cf4 \strokec4  = \cf5 \strokec5 true\cf4 \strokec4 ;\cb1 \
\cb3           \cf5 \strokec5 break\cf4 \strokec4 ; \cf2 \strokec2 // Stop looking for rooms for this event.\cf4 \cb1 \strokec4 \
\cb3         \} \cf5 \strokec5 else\cf4 \strokec4  \{\cb1 \
\cb3           \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `-> CONFLICT: "\cf4 \strokec4 $\{\cf9 \strokec9 room\cf4 \strokec4 .\cf9 \strokec9 name\cf4 \strokec4 \}\cf7 \strokec7 " is already booked.`\cf4 \strokec4 );\cb1 \
\cb3         \}\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (!\cf9 \strokec9 roomBooked\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `-> No suitable and available room found for "\cf4 \strokec4 $\{\cf9 \strokec9 event\cf4 \strokec4 .\cf9 \strokec9 getTitle\cf4 \strokec4 ()\}\cf7 \strokec7 ".`\cf4 \strokec4 );\cb1 \
\cb3     \}\cb1 \
\cb3   \});\cb1 \
\
\cb3   \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 'Room booking process finished.'\cf4 \strokec4 );\cb1 \
\cb3 \}\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf10 \cb3 \strokec10 /**\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * Reads meeting room data from the configured spreadsheet.\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  * @returns \{Array<Object>\} An array of objects, where each object represents a room.\cf4 \cb1 \strokec4 \
\cf10 \cb3 \strokec10  */\cf4 \cb1 \strokec4 \
\pard\pardeftab720\partightenfactor0
\cf5 \cb3 \strokec5 function\cf4 \strokec4  \cf9 \strokec9 getMeetingRoomsFromSheet\cf4 \strokec4 () \{\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3   \cf5 \strokec5 try\cf4 \strokec4  \{\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 spreadsheet\cf4 \strokec4  = \cf6 \strokec6 SpreadsheetApp\cf4 \strokec4 .\cf9 \strokec9 openById\cf4 \strokec4 (\cf6 \strokec6 SHEET_ID\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 sheet\cf4 \strokec4  = \cf9 \strokec9 spreadsheet\cf4 \strokec4 .\cf9 \strokec9 getSheetByName\cf4 \strokec4 (\cf6 \strokec6 SHEET_NAME\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 dataRange\cf4 \strokec4  = \cf9 \strokec9 sheet\cf4 \strokec4 .\cf9 \strokec9 getDataRange\cf4 \strokec4 ();\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 values\cf4 \strokec4  = \cf9 \strokec9 dataRange\cf4 \strokec4 .\cf9 \strokec9 getValues\cf4 \strokec4 ();\cb1 \
\cb3     \cb1 \
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 values\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4  < \cf8 \strokec8 2\cf4 \strokec4 ) \{\cb1 \
\cb3       \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 'Spreadsheet is empty or headers are missing.'\cf4 \strokec4 );\cb1 \
\cb3       \cf5 \strokec5 return\cf4 \strokec4  [];\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 headers\cf4 \strokec4  = \cf9 \strokec9 values\cf4 \strokec4 [\cf8 \strokec8 0\cf4 \strokec4 ];\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 emailIndex\cf4 \strokec4  = \cf9 \strokec9 headers\cf4 \strokec4 .\cf9 \strokec9 indexOf\cf4 \strokec4 (\cf7 \strokec7 'Email ID'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 nameIndex\cf4 \strokec4  = \cf9 \strokec9 headers\cf4 \strokec4 .\cf9 \strokec9 indexOf\cf4 \strokec4 (\cf7 \strokec7 'Meeting Room Name'\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 capacityIndex\cf4 \strokec4  = \cf9 \strokec9 headers\cf4 \strokec4 .\cf9 \strokec9 indexOf\cf4 \strokec4 (\cf7 \strokec7 'Capacity'\cf4 \strokec4 );\cb1 \
\
\cb3     \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 emailIndex\cf4 \strokec4  === -\cf8 \strokec8 1\cf4 \strokec4  || \cf9 \strokec9 nameIndex\cf4 \strokec4  === -\cf8 \strokec8 1\cf4 \strokec4  || \cf9 \strokec9 capacityIndex\cf4 \strokec4  === -\cf8 \strokec8 1\cf4 \strokec4 ) \{\cb1 \
\cb3         \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 'Spreadsheet columns "Meeting Room Name", "Email ID", or "Capacity" not found.'\cf4 \strokec4 );\cb1 \
\cb3         \cf5 \strokec5 return\cf4 \strokec4  [];\cb1 \
\cb3     \}\cb1 \
\
\cb3     \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 rooms\cf4 \strokec4  = [];\cb1 \
\cb3     \cf5 \strokec5 for\cf4 \strokec4  (\cf5 \strokec5 let\cf4 \strokec4  \cf9 \strokec9 i\cf4 \strokec4  = \cf8 \strokec8 1\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4  < \cf9 \strokec9 values\cf4 \strokec4 .\cf9 \strokec9 length\cf4 \strokec4 ; \cf9 \strokec9 i\cf4 \strokec4 ++) \{\cb1 \
\cb3       \cf5 \strokec5 const\cf4 \strokec4  \cf9 \strokec9 row\cf4 \strokec4  = \cf9 \strokec9 values\cf4 \strokec4 [\cf9 \strokec9 i\cf4 \strokec4 ];\cb1 \
\cb3       \cf5 \strokec5 if\cf4 \strokec4  (\cf9 \strokec9 row\cf4 \strokec4 [\cf9 \strokec9 emailIndex\cf4 \strokec4 ] && \cf9 \strokec9 row\cf4 \strokec4 [\cf9 \strokec9 nameIndex\cf4 \strokec4 ] && \cf9 \strokec9 row\cf4 \strokec4 [\cf9 \strokec9 capacityIndex\cf4 \strokec4 ]) \{\cb1 \
\cb3         \cf9 \strokec9 rooms\cf4 \strokec4 .\cf9 \strokec9 push\cf4 \strokec4 (\{\cb1 \
\cb3           \cf9 \strokec9 name\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf9 \strokec9 nameIndex\cf4 \strokec4 ],\cb1 \
\cb3           \cf9 \strokec9 email\cf4 \strokec4 : \cf9 \strokec9 row\cf4 \strokec4 [\cf9 \strokec9 emailIndex\cf4 \strokec4 ],\cb1 \
\cb3           \cf9 \strokec9 capacity\cf4 \strokec4 : \cf9 \strokec9 parseInt\cf4 \strokec4 (\cf9 \strokec9 row\cf4 \strokec4 [\cf9 \strokec9 capacityIndex\cf4 \strokec4 ], \cf8 \strokec8 10\cf4 \strokec4 )\cb1 \
\cb3         \});\cb1 \
\cb3       \}\cb1 \
\cb3     \}\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  \cf9 \strokec9 rooms\cf4 \strokec4 ;\cb1 \
\
\cb3   \} \cf5 \strokec5 catch\cf4 \strokec4  (\cf9 \strokec9 e\cf4 \strokec4 ) \{\cb1 \
\cb3     \cf6 \strokec6 Logger\cf4 \strokec4 .\cf9 \strokec9 log\cf4 \strokec4 (\cf7 \strokec7 `Error reading spreadsheet: \cf4 \strokec4 $\{\cf9 \strokec9 e\cf4 \strokec4 .\cf9 \strokec9 message\cf4 \strokec4 \}\cf7 \strokec7 `\cf4 \strokec4 );\cb1 \
\cb3     \cf5 \strokec5 return\cf4 \strokec4  [];\cb1 \
\cb3   \}\cb1 \
\cb3 \}\cb1 \
}